generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// TABELAS BASE
// ============================================

model Perfil {
  id        Int       @id @default(autoincrement())
  nome      String    @unique @db.VarChar(255) // "MATRIZ" | "PRODUCAO" | "VENDA"
  descricao String    @db.Text
  usuarios  Usuario[]

  @@map("perfis")
}

model Fornecedor {
  id               Int                 @id @default(autoincrement())
  unidadeId        Int?                @map("unidade_id")
  nomeEmpresa      String              @map("nome_empresa") @db.VarChar(200)
  descricaoEmpresa String              @map("descricao_empresa") @db.Text
  material         String              @db.VarChar(150)
  cnpjCpf          String              @unique @map("cnpj_cpf") @db.VarChar(20)
  contato          String              @db.VarChar(100)
  email            String              @db.VarChar(150)
  endereco         String              @db.Text
  criadoEm         DateTime            @default(now()) @map("criado_em")
  atualizadoEm     DateTime            @default(now()) @updatedAt @map("atualizado_em")
  produtos         ProdutoFornecedor[]

  unidade Unidade? @relation("UsuarioUnidade", fields: [unidadeId], references: [id], onDelete: SetNull)

  @@map("fornecedores")
}

model Unidade {
  id           Int          @id @default(autoincrement())
  gerenteId    Int?         @map("gerente_id")
  nome         String       @db.VarChar(100)
  endereco     String
  status       Boolean      @default(true)
  criadoEm     DateTime     @default(now()) @map("criado_em")
  atualizadoEm DateTime     @default(now()) @updatedAt @map("atualizado_em")
  tipo         tipo_unidade
  caixas       Caixa[]
  estoques     Estoque[]
  lotes        Lote[]
  produtos     Produto[]
  gerente      Usuario?     @relation("GerenteUnidade", fields: [gerenteId], references: [id])
  usuarios     Usuario[]    @relation("UsuarioUnidade")
  vendas       Venda[]

  @@map("unidades")
}

model Usuario {
  id                  Int          @id @default(autoincrement())
  perfilId            Int          @map("perfil_id")
  unidadeId           Int?         @map("unidade_id")
  nome                String       @db.VarChar(100)
  email               String       @unique @db.VarChar(100)
  senha               String       @db.VarChar(255)
  telefone            String       @db.VarChar(20)
  status              Boolean      @default(true)
  criadoEm            DateTime     @default(now()) @map("criado_em")
  atualizadoEm        DateTime     @default(now()) @updatedAt @map("atualizado_em")
  caixas              Caixa[]
  lotes               Lote[]
  reset_senhas        ResetSenha[]
  unidadesGerenciadas Unidade[]    @relation("GerenteUnidade")
  perfil              Perfil       @relation(fields: [perfilId], references: [id])
  unidade             Unidade?     @relation("UsuarioUnidade", fields: [unidadeId], references: [id])
  vendas              Venda[]

  @@map("usuarios")
}

model ResetSenha {
  id           Int      @id @default(autoincrement())
  usuarioId    Int      @map("usuario_id")
  codigoReset  String   @map("codigo_reset") @db.VarChar(6)
  codigoExpira DateTime @map("codigo_expira")
  usado        Boolean  @default(false)
  criadoEm     DateTime @default(now()) @map("criado_em")
  usuario      Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("reset_senhas")
}

model Lote {
  id                     Int                   @id @default(autoincrement())
  unidadeId              Int                   @map("unidade_id")
  responsavelId          Int                   @map("responsavel_id")
  nome                   String                @db.VarChar(255)
  qntdItens              Int                   @map("qntd_itens")
  observacoes            String?
  dataCriacao            DateTime              @default(now()) @map("data_criacao")
  tipo                   tipo_lote
  responsavel            Usuario               @relation(fields: [responsavelId], references: [id])
  unidade                Unidade               @relation(fields: [unidadeId], references: [id])
  producoes              Producao[]
  produtos               Produto[]
  rastreabilidadeDestino RastreabilidadeLote[] @relation("LoteDestino")
  rastreabilidadeOrigem  RastreabilidadeLote[] @relation("LoteOrigem")
  registrosSanitarios    RegistroSanitario[]

  @@map("lotes")
}

model Produto {
  id             Int                 @id @default(autoincrement())
  unidadeId      Int                 @map("unidade_id")
  loteId         Int                 @map("lote_id")
  nome           String              @db.VarChar(150)
  sku            String              @unique @db.VarChar(50)
  categoria      String?             @db.VarChar(100)
  descricao      String?
  preco          Decimal             @db.Decimal(10, 2)
  dataFabricacao DateTime            @map("data_fabricacao")
  dataValidade   DateTime            @map("data_validade")
  criadoEm       DateTime            @default(now()) @map("criado_em")
  atualizadoEm   DateTime            @default(now()) @updatedAt @map("atualizado_em")
  estoques       Estoque[]
  itensVendas    ItemVenda[]
  lote           Lote                @relation(fields: [loteId], references: [id])
  unidade        Unidade             @relation(fields: [unidadeId], references: [id])
  fornecedores   ProdutoFornecedor[]

  @@map("produtos")
}

model Estoque {
  id            Int      @id @default(autoincrement())
  unidadeId     Int      @map("unidade_id")
  produtoId     Int      @map("produto_id")
  quantidade    Int      @default(0)
  estoqueMinimo Int      @map("estoque_minimo")
  atualizadoEm  DateTime @default(now()) @updatedAt @map("atualizado_em")
  produto       Produto  @relation(fields: [produtoId], references: [id])
  unidade       Unidade  @relation(fields: [unidadeId], references: [id])

  @@unique([unidadeId, produtoId])
  @@map("estoques")
}

model ProdutoFornecedor {
  id               Int        @id @default(autoincrement())
  produtoId        Int        @map("produto_id")
  fornecedorId     Int        @map("fornecedor_id")
  precoCusto       Decimal?   @map("preco_custo") @db.Decimal(10, 2)
  prazoEntregaDias Int?       @map("prazo_entrega_dias")
  preferencial     Boolean    @default(false)
  fornecedor       Fornecedor @relation(fields: [fornecedorId], references: [id], onDelete: Cascade)
  produto          Produto    @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@unique([produtoId, fornecedorId])
  @@map("produtos_fornecedores")
}

model Producao {
  id            Int      @id @default(autoincrement())
  loteId        Int      @map("lote_id")
  tipoProduto   String   @map("tipo_produto")
  quantidade    Float
  unidadeMedida String   @map("unidade_medida") @db.VarChar(50)
  dataRegistro  DateTime @default(now()) @map("data_registro")
  lote          Lote     @relation(fields: [loteId], references: [id], onDelete: Cascade)

  @@map("producoes")
}

model RastreabilidadeLote {
  id            Int      @id @default(autoincrement())
  loteOrigemId  Int      @map("lote_origem_id")
  loteDestinoId Int      @map("lote_destino_id")
  descricao     String?  @db.VarChar(255)
  dataVinculo   DateTime @default(now()) @map("data_vinculo")
  loteDestino   Lote     @relation("LoteDestino", fields: [loteDestinoId], references: [id], onDelete: Cascade)
  loteOrigem    Lote     @relation("LoteOrigem", fields: [loteOrigemId], references: [id], onDelete: Cascade)

  @@map("rastreabilidade_lotes")
}

model AtividadesLote {
  id            Int            @id @default(autoincrement())
  descricao     String
  tipo          AtividadesEnum
  loteId        Int
  // talhaoId Int
  data          DateTime
  responsavelId String

  lote        Lote    @relation("Atividades", fields: [loteId], references: [id], onDelete: Cascade)
  // talhao T
  responsavel Usuario @relation(fields: [responsavelId], references: [id], onDelete: Restrict)
}

model RegistroSanitario {
  id            Int                     @id @default(autoincrement())
  loteId        Int                     @map("lote_id")
  produto       String                  @db.VarChar(255)
  dataAplicacao DateTime                @default(now()) @map("data_aplicacao")
  quantidade    Float?
  observacoes   String?
  tipo          tipo_registro_sanitario
  lote          Lote                    @relation(fields: [loteId], references: [id], onDelete: Cascade)

  @@map("registros_sanitarios")
}

model Caixa {
  id           Int       @id @default(autoincrement())
  unidadeId    Int       @map("unidade_id")
  usuarioId    Int       @map("usuario_id")
  status       Boolean   @default(false)
  saldoInicial Decimal   @default(0) @map("saldo_inicial") @db.Decimal(12, 2)
  saldoFinal   Decimal?  @map("saldo_final") @db.Decimal(12, 2)
  abertoEm     DateTime  @map("aberto_em")
  fechadoEm    DateTime? @map("fechado_em")
  unidade      Unidade   @relation(fields: [unidadeId], references: [id])
  usuario      Usuario   @relation(fields: [usuarioId], references: [id])
  vendas       Venda[]

  @@map("caixas")
}

model Venda {
  id        Int            @id @default(autoincrement())
  caixaId   Int            @map("caixa_id")
  usuarioId Int            @map("usuario_id")
  unidadeId Int            @map("unidade_id")
  total     Decimal        @db.Decimal(12, 2)
  criadoEm  DateTime       @default(now()) @map("criado_em")
  pagamento tipo_pagamento
  itens     ItemVenda[]
  caixa     Caixa          @relation(fields: [caixaId], references: [id])
  unidade   Unidade        @relation(fields: [unidadeId], references: [id])
  usuario   Usuario        @relation(fields: [usuarioId], references: [id])

  @@map("vendas")
}

model ItemVenda {
  id            Int     @id @default(autoincrement())
  vendaId       Int     @map("venda_id")
  produtoId     Int     @map("produto_id")
  quantidade    Int
  precoUnitario Decimal @map("preco_unitario") @db.Decimal(12, 2)
  desconto      Decimal @default(0) @db.Decimal(12, 2)
  subtotal      Decimal @db.Decimal(12, 2)
  produto       Produto @relation(fields: [produtoId], references: [id])
  venda         Venda   @relation(fields: [vendaId], references: [id], onDelete: Cascade)

  @@map("itens_vendas")
}

model Saidas {
  id            Int       @id @default(autoincrement())
  unidadeId     Int
  descricao     String
  tipo          tipo_saida
  valor         itens
  data          DateTime
  usuario       Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Restrict)
}

// ============================================
// ENUMS
// ============================================

enum tipo_unidade {
  Matriz
  Fazenda
  Loja
}

enum tipo_lote {
  Gado
  Soja
  Leite
  Outro
}

enum tipo_registro_sanitario {
  VACINA
  MEDICACAO
  RACAO
  OUTRO
}

enum tipo_pagamento {
  DINHEIRO
  CARTAO
  PIX
}
