generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// npx prisma db push — envia o schema.prisma para o banco

// ============================================
// TABELAS BASE
// ============================================

model Perfil {
  id        Int       @id @default(autoincrement())
  nome      String    @unique @db.VarChar(255) // "MATRIZ" | "PRODUCAO" | "VENDA"
  descricao String    @db.Text
  usuarios  Usuario[]

  @@map("perfis")
}

model Fornecedor {
  id               Int                 @id @default(autoincrement())
  unidadeId        Int?                @map("unidade_id")
  nomeEmpresa      String              @map("nome_empresa") @db.VarChar(200)
  descricaoEmpresa String              @map("descricao_empresa") @db.Text
  material         String              @db.VarChar(150)
  cnpjCpf          String              @unique @map("cnpj_cpf") @db.VarChar(20)
  contato          String              @db.VarChar(100)
  email            String              @db.VarChar(150)
  endereco         String              @db.Text
  criadoEm         DateTime            @default(now()) @map("criado_em")
  atualizadoEm     DateTime            @default(now()) @updatedAt @map("atualizado_em")
  produtos         ProdutoFornecedor[]

  Unidade Unidade? @relation(fields: [unidadeId], references: [id])

  @@map("fornecedores")
}

model Unidade {
  id           Int         @id @default(autoincrement())
  gerenteId    Int?        @map("gerente_id")
  nome         String      @db.VarChar(100)
  endereco     String      @db.Text
  tipo         TipoUnidade
  status       Boolean     @default(true)
  criadoEm     DateTime    @default(now()) @map("criado_em")
  atualizadoEm DateTime    @default(now()) @updatedAt @map("atualizado_em")

  gerente    Usuario?     @relation("GerenteUnidade", fields: [gerenteId], references: [id], onDelete: SetNull)
  usuarios   Usuario[]    @relation("UsuarioUnidade")
  produtos   Produto[]
  estoques   Estoque[]
  lotes      Lote[]
  caixas     Caixa[]
  vendas     Venda[]
  Fornecedor Fornecedor[]

  @@map("unidades")
}

model Usuario {
  id           Int      @id @default(autoincrement())
  perfilId     Int      @map("perfil_id")
  unidadeId    Int?     @map("unidade_id")
  nome         String   @db.VarChar(100)
  email        String   @unique @db.VarChar(100)
  senha        String   @db.VarChar(255)
  telefone     String   @db.VarChar(20)
  status       Boolean  @default(true)
  criadoEm     DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @default(now()) @updatedAt @map("atualizado_em")

  perfil              Perfil           @relation(fields: [perfilId], references: [id], onDelete: Restrict)
  unidade             Unidade?         @relation("UsuarioUnidade", fields: [unidadeId], references: [id], onDelete: SetNull)
  unidadesGerenciadas Unidade[]        @relation("GerenteUnidade")
  resetSenhas         ResetSenha[]
  lotes               Lote[]
  caixas              Caixa[]
  vendas              Venda[]
  saidas              Saidas[]
  AtividadesLote      AtividadesLote[]

  @@map("usuarios")
}

model ResetSenha {
  id           Int      @id @default(autoincrement())
  usuarioId    Int      @map("usuario_id")
  codigoReset  String   @map("codigo_reset") @db.VarChar(6)
  codigoExpira DateTime @map("codigo_expira")
  usado        Boolean  @default(false)
  criadoEm     DateTime @default(now()) @map("criado_em")

  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("reset_senhas")
}

// ============================================
// LOTES E PRODUÇÃO
// ============================================

model Lote {
  id            Int      @id @default(autoincrement())
  unidadeId     Int      @map("unidade_id")
  responsavelId Int      @map("responsavel_id")
  nome          String   @db.VarChar(255)
  tipo          TipoLote
  qntdItens     Int      @map("qntd_itens")
  observacoes   String?  @db.Text
  dataCriacao   DateTime @default(now()) @map("data_criacao")

  unidade                Unidade               @relation(fields: [unidadeId], references: [id], onDelete: Restrict)
  responsavel            Usuario               @relation(fields: [responsavelId], references: [id], onDelete: Restrict)
  produtos               Produto[]
  producoes              Producao[]
  registrosSanitarios    RegistroSanitario[]
  rastreabilidadeOrigem  RastreabilidadeLote[] @relation("LoteOrigem")
  rastreabilidadeDestino RastreabilidadeLote[] @relation("LoteDestino")
  AtividadesLote         AtividadesLote[]

  @@map("lotes")
}

model Produto {
  id             Int      @id @default(autoincrement())
  unidadeId      Int      @map("unidade_id")
  loteId         Int      @map("lote_id")
  nome           String   @db.VarChar(150)
  sku            String   @unique @db.VarChar(50)
  categoria      String?  @db.VarChar(100)
  descricao      String?  @db.Text
  preco          Decimal  @db.Decimal(10, 2)
  dataFabricacao DateTime @map("data_fabricacao")
  dataValidade   DateTime @map("data_validade")
  criadoEm       DateTime @default(now()) @map("criado_em")
  atualizadoEm   DateTime @default(now()) @updatedAt @map("atualizado_em")

  unidade      Unidade             @relation(fields: [unidadeId], references: [id], onDelete: Restrict)
  lote         Lote                @relation(fields: [loteId], references: [id], onDelete: Restrict)
  estoques     Estoque[]
  fornecedores ProdutoFornecedor[]
  itensVendas  ItemVenda[]

  @@map("produtos")
}

model Estoque {
  id            Int      @id @default(autoincrement())
  unidadeId     Int      @map("unidade_id")
  produtoId     Int      @map("produto_id")
  quantidade    Int      @default(0)
  estoqueMinimo Int      @map("estoque_minimo")
  atualizadoEm  DateTime @default(now()) @updatedAt @map("atualizado_em")

  unidade Unidade @relation(fields: [unidadeId], references: [id], onDelete: Restrict)
  produto Produto @relation(fields: [produtoId], references: [id], onDelete: Restrict)

  @@unique([unidadeId, produtoId])
  @@map("estoques")
}

model ProdutoFornecedor {
  id               Int      @id @default(autoincrement())
  id_contrato Int
  produtoId        Int      @map("produto_id")
  quantidade Int
  unidade_medida UnidadesDeMedida
  fornecedorId     Int      @map("fornecedor_id")
  precoCusto       Decimal? @map("preco_custo") @db.Decimal(10, 2)
  prazoEntregaDias Int?     @map("prazo_entrega_dias")
  preferencial     Boolean  @default(false)

  produto    Produto    @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  fornecedor Fornecedor @relation(fields: [fornecedorId], references: [id], onDelete: Cascade)

  @@unique([produtoId, fornecedorId])
  @@map("produtos_fornecedores")
}

model Producao {
  id            Int      @id @default(autoincrement())
  loteId        Int      @map("lote_id")
  tipoProduto   String   @map("tipo_produto") @db.Text
  quantidade    Float
  unidadeMedida String   @map("unidade_medida") @db.VarChar(50)
  dataRegistro  DateTime @default(now()) @map("data_registro")

  lote Lote @relation(fields: [loteId], references: [id], onDelete: Cascade)

  @@map("producoes")
}

model RastreabilidadeLote {
  id            Int      @id @default(autoincrement())
  loteOrigemId  Int      @map("lote_origem_id")
  loteDestinoId Int      @map("lote_destino_id")
  descricao     String?  @db.VarChar(255)
  dataVinculo   DateTime @default(now()) @map("data_vinculo")

  loteOrigem  Lote @relation("LoteOrigem", fields: [loteOrigemId], references: [id], onDelete: Cascade)
  loteDestino Lote @relation("LoteDestino", fields: [loteDestinoId], references: [id], onDelete: Cascade)

  @@map("rastreabilidade_lotes")
}

model AtividadesLote {
  id            Int            @id @default(autoincrement())
  descricao     String
  tipo          AtividadesEnum
  loteId        Int
  // talhaoId Int
  data          DateTime
  responsavelId Int
  // talhao T
  responsavel   Usuario        @relation(fields: [responsavelId], references: [id], onDelete: Restrict)
  Lote          Lote           @relation(fields: [loteId], references: [id])
}

model RegistroSanitario {
  id            Int                   @id @default(autoincrement())
  loteId        Int                   @map("lote_id")
  tipo          TipoRegistroSanitario
  produto       String                @db.VarChar(255)
  dataAplicacao DateTime              @default(now()) @map("data_aplicacao")
  quantidade    Float?
  observacoes   String?               @db.Text

  lote Lote @relation(fields: [loteId], references: [id], onDelete: Cascade)

  @@map("registros_sanitarios")
}

// ============================================
// VENDAS E CAIXA
// ============================================

model Caixa {
  id           Int       @id @default(autoincrement())
  unidadeId    Int       @map("unidade_id")
  usuarioId    Int       @map("usuario_id")
  status       Boolean   @default(false)
  saldoInicial Decimal   @default(0) @map("saldo_inicial") @db.Decimal(12, 2)
  saldoFinal   Decimal?  @map("saldo_final") @db.Decimal(12, 2)
  abertoEm     DateTime  @map("aberto_em")
  fechadoEm    DateTime? @map("fechado_em")

  unidade Unidade @relation(fields: [unidadeId], references: [id], onDelete: Restrict)
  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Restrict)
  vendas  Venda[]

  @@map("caixas")
}

model Venda {
  id        Int           @id @default(autoincrement())
  caixaId   Int           @map("caixa_id")
  usuarioId Int           @map("usuario_id")
  unidadeId Int           @map("unidade_id")
  total     Decimal       @db.Decimal(12, 2)
  pagamento TipoPagamento
  criadoEm  DateTime      @default(now()) @map("criado_em")

  caixa   Caixa       @relation(fields: [caixaId], references: [id], onDelete: Restrict)
  usuario Usuario     @relation(fields: [usuarioId], references: [id], onDelete: Restrict)
  unidade Unidade     @relation(fields: [unidadeId], references: [id], onDelete: Restrict)
  itens   ItemVenda[]

  @@map("vendas")
}

model ItemVenda {
  id            Int     @id @default(autoincrement())
  vendaId       Int     @map("venda_id")
  produtoId     Int     @map("produto_id")
  quantidade    Int
  precoUnitario Decimal @map("preco_unitario") @db.Decimal(12, 2)
  desconto      Decimal @default(0) @db.Decimal(12, 2)
  subtotal      Decimal @db.Decimal(12, 2)

  venda   Venda   @relation(fields: [vendaId], references: [id], onDelete: Cascade)
  produto Produto @relation(fields: [produtoId], references: [id], onDelete: Restrict)

  @@map("itens_vendas")
}

model Saidas {
  id        Int       @id @default(autoincrement())
  usuarioId Int
  unidadeId Int
  descricao String
  tipo      TipoSaida
  valor     Decimal   @db.Decimal(12, 2)
  data      DateTime
  usuario   Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Restrict)
}

model Contratos {
  id        Int       @id @default(autoincrement())
  fornecedor_id Int
  loja_id Int
  dataInicio DateTime
  dataFim DateTime
  status StatusContrato
  frequencia_entregas FrequenciaEnum
  frequencia_pagamento FrequenciaEnum
  valorTotal Int

  fornecedor Unidade @relation(fields: [fornecedor_id], references: [id], onDelete: Restrict)
loja Unidade @relation(fields: [loja_id], references: [id], onDelete: Restrict)
  

}

// ============================================
// ENUMS
// ============================================

enum TipoUnidade {
  Matriz
  Fazenda
  Loja

  @@map("tipo_unidade")
}

enum TipoLote {
  Gado
  Soja
  Leite
  Outro

  @@map("tipo_lote")
}

enum TipoRegistroSanitario {
  VACINA
  MEDICACAO
  RACAO
  OUTRO

  @@map("tipo_registro_sanitario")
}

enum TipoPagamento {
  DINHEIRO
  CARTAO
  PIX

  @@map("tipo_pagamento")
}

enum TipoSaida {
  ALUGUEL
  AGUA
  ENERGIA
  MANUTENCAO
  SALARIOS
  ESTOQUE
}

enum AtividadesEnum {
  PLANTIO
  ADUBACAO
  FERTILIZACAO
}

enum StatusContrato{
  ATIVO
  INATIVO
}

enum FrequenciaEnum{
  SEMANALMENTE
  QUINZENAL
  MENSALMENTE
}

enum UnidadesDeMedida {
  KG
  G
  T
  LOTE
  UNIDADE
  SACA
  CABEÇA
  ARROBA
  LITRO
  
}
